name: Docker Image CI

on:
  push:
    branches: 
      - mainn

  pull_request:
    branches: 
      - mainn

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      region: ${{ secrets.AWS_REGION }}
    steps:
    - name: Checkout source code
      uses: actions/checkout@v1

    # Install Node 14 
    - name: Setup Node and run Test
      uses: actions/setup-node@v1
      with:
        node-version: 14

    # Install dependencies
    - run: npm install

    # Run tests
    - run: npm test

    - name: Code Coverage and Publish
      run: npm run coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
          token: ${{ secrets.CODECOV_TOKEN }}
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Generate main build number
      id: buildnumbermain
      uses: einaregilsson/build-number@v3
      with:
        token: ${{ secrets.GIT_TOKEN }}
        prefix: ${{ secrets.MAIN_APP_PREFIX }}
      
    - name: Build, tag, and push main image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ steps.buildnumbermain.outputs.build_number }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
    - name: Logout from Amazon ECR
      if: always()
      run: docker logout ${{ steps.login-ecr.outputs.registry }}

    - name: Report Status
      if: always()
      uses: ravsamhq/notify-slack-action@master
      with:
        status: ${{ job.status }}
        notify_when: 'failure'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Report Status
      if: always()
      uses: ravsamhq/notify-slack-action@master
      with:
        status: ${{ job.status }}
        notify_when: 'failure'
        notification_title: 'GitHub Actions'
        footer: 'Linked to Repo <{repo_url}|{repo}>'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
